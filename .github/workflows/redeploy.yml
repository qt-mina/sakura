name: Bot Health Check & Auto-Redeploy

on:
  schedule:
    - cron: '* * * * *'  # Runs every 1 minute
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check if deployment is already in progress
        id: deploy_check
        run: |
          RENDER_STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys?limit=1")
          
          LATEST_STATUS=$(echo "$RENDER_STATUS" | grep -o '"status":"[^"]*"' | head -1 | cut -d'"' -f4)
          
          if [ "$LATEST_STATUS" = "build_in_progress" ] || [ "$LATEST_STATUS" = "update_in_progress" ]; then
            echo "deploying=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Deployment already in progress (Status: $LATEST_STATUS). Skipping health check."
          else
            echo "deploying=false" >> $GITHUB_OUTPUT
          fi

      - name: Check bot health (Real Functionality Test)
        id: health
        if: steps.deploy_check.outputs.deploying == 'false'
        run: |
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          CHECK_TIME=$(date '+%H:%M UTC')
          
          # Step 1: Check if bot token is valid
          TOKEN_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/getMe")
          
          # Step 2: Get recent updates to verify bot is processing messages
          UPDATES_RESPONSE=$(curl -s "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/getUpdates?limit=1&timeout=5")
          
          # Step 3: Send /start command to test actual bot functionality
          START_CMD_RESPONSE=$(curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=/start" \
            -d "disable_notification=true")
          
          START_CMD_OK=$(echo "$START_CMD_RESPONSE" | grep -o '"ok":true' || echo "")
          
          # Step 4: Wait for bot to process and respond
          sleep 5
          
          # Step 5: Check if bot responded to /start command
          BOT_RESPONSE=$(curl -s "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/getUpdates?limit=10&timeout=5")
          BOT_RESPONDED=$(echo "$BOT_RESPONSE" | grep -E '"from".*"is_bot":true' || echo "")
          
          # Step 6: Send an informative test message and verify it's sent
          TEST_MSG_RESPONSE=$(curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=‚úÖ <b>Bot Health Check</b>%0A%0Aüïí Time: $CHECK_TIME%0Aüìä Status: <b>Operational</b>%0AüîÑ API: Responding%0Aü§ñ Command Test: $([ -n "$BOT_RESPONDED" ] && echo "Passed ‚úì" || echo "No Response")%0A‚úâÔ∏è Messages: Working%0A%0A‚è≠ Next check in 1 minute" \
            -d "parse_mode=HTML" \
            -d "disable_notification=true")
          
          # Parse responses
          UPDATES_OK=$(echo "$UPDATES_RESPONSE" | grep -o '"ok":true' || echo "")
          TEST_MSG_OK=$(echo "$TEST_MSG_RESPONSE" | grep -o '"ok":true' || echo "")
          
          # Determine health status
          if [ "$TOKEN_CHECK" = "200" ] && [ -n "$UPDATES_OK" ] && [ -n "$TEST_MSG_OK" ] && [ -n "$START_CMD_OK" ] && [ -n "$BOT_RESPONDED" ]; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "message=‚úÖ Bot Status: HEALTHY%0Aüïí Time: $TIMESTAMP%0Aüìä Token: Valid%0Aüì® API: Responding%0Aü§ñ Command Test: Passed%0A‚úâÔ∏è Messages: Sendable" >> $GITHUB_OUTPUT
          else
            echo "status=down" >> $GITHUB_OUTPUT
            echo "message=‚ùå <b>Bot Status: DOWN</b>%0A%0Aüïí Time: $TIMESTAMP%0Aüìä Token HTTP: $TOKEN_CHECK%0Aüì® Updates API: $([ -n "$UPDATES_OK" ] && echo "OK" || echo "FAILED")%0Aü§ñ Command Sent: $([ -n "$START_CMD_OK" ] && echo "OK" || echo "FAILED")%0Aü§ñ Bot Response: $([ -n "$BOT_RESPONDED" ] && echo "Received" || echo "NONE")%0A‚úâÔ∏è Send Test: $([ -n "$TEST_MSG_OK" ] && echo "OK" || echo "FAILED")%0A%0A‚ö†Ô∏è Initiating recovery process..." >> $GITHUB_OUTPUT
          fi

      - name: Send critical status alert
        if: steps.deploy_check.outputs.deploying == 'false' && steps.health.outputs.status == 'down'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=${{ steps.health.outputs.message }}" \
            -d "parse_mode=HTML" || true

      - name: Wait before redeploying
        if: steps.deploy_check.outputs.deploying == 'false' && steps.health.outputs.status == 'down'
        run: sleep 30

      - name: Recheck bot health
        id: recheck
        if: steps.deploy_check.outputs.deploying == 'false' && steps.health.outputs.status == 'down'
        run: |
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          CHECK_TIME=$(date '+%H:%M UTC')
          
          TOKEN_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/getMe")
          
          UPDATES_RESPONSE=$(curl -s "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/getUpdates?limit=1&timeout=5")
          
          # Send /start command for recheck
          START_CMD_RESPONSE=$(curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=/start" \
            -d "disable_notification=true")
          
          START_CMD_OK=$(echo "$START_CMD_RESPONSE" | grep -o '"ok":true' || echo "")
          
          sleep 5
          
          BOT_RESPONSE=$(curl -s "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/getUpdates?limit=10&timeout=5")
          BOT_RESPONDED=$(echo "$BOT_RESPONSE" | grep -E '"from".*"is_bot":true' || echo "")
          
          TEST_MSG_RESPONSE=$(curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=üîç <b>Recheck Ping</b> - $CHECK_TIME" \
            -d "parse_mode=HTML" \
            -d "disable_notification=true")
          
          UPDATES_OK=$(echo "$UPDATES_RESPONSE" | grep -o '"ok":true' || echo "")
          TEST_MSG_OK=$(echo "$TEST_MSG_RESPONSE" | grep -o '"ok":true' || echo "")
          
          if [ "$TOKEN_CHECK" = "200" ] && [ -n "$UPDATES_OK" ] && [ -n "$TEST_MSG_OK" ] && [ -n "$START_CMD_OK" ] && [ -n "$BOT_RESPONDED" ]; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "message=‚úÖ <b>Bot Status: RECOVERED</b>%0A%0Aüïí Time: $TIMESTAMP%0Aüí° Bot is back online%0AüéØ No redeploy needed%0A%0A‚ú® Resuming normal monitoring" >> $GITHUB_OUTPUT
          else
            echo "status=down" >> $GITHUB_OUTPUT
            echo "message=‚ùå <b>Bot Status: STILL DOWN</b>%0A%0Aüïí Time: $TIMESTAMP%0AüîÑ Triggering automatic redeploy...%0A‚è≥ Please wait 2-3 minutes" >> $GITHUB_OUTPUT
          fi

      - name: Send recheck update
        if: steps.deploy_check.outputs.deploying == 'false' && steps.health.outputs.status == 'down'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=${{ steps.recheck.outputs.message }}" \
            -d "parse_mode=HTML" || true

      - name: Trigger Render Redeploy
        id: redeploy
        if: steps.deploy_check.outputs.deploying == 'false' && steps.health.outputs.status == 'down' && steps.recheck.outputs.status == 'down'
        run: |
          DEPLOY_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST ${{ secrets.REDEPLOY }})
          
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          if [ "$DEPLOY_RESPONSE" = "200" ] || [ "$DEPLOY_RESPONSE" = "201" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "message=üîÑ <b>Redeploy TRIGGERED</b>%0A%0Aüïí Time: $TIMESTAMP%0Aüìä Deploy Response: $DEPLOY_RESPONSE%0A‚è≥ Bot restarting...%0A%0A‚úÖ Expected online in 2-3 minutes" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "message=‚ùå <b>Redeploy FAILED</b>%0A%0Aüïí Time: $TIMESTAMP%0Aüìä Deploy Response: $DEPLOY_RESPONSE%0Aüö® Manual intervention required!%0A%0Aüîó Check logs immediately" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Send redeploy status
        if: steps.deploy_check.outputs.deploying == 'false' && steps.health.outputs.status == 'down' && steps.recheck.outputs.status == 'down'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=${{ steps.redeploy.outputs.message }}" \
            -d "parse_mode=HTML" || true

      - name: Send workflow failure alert
        if: failure()
        run: |
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.CHAT_ID }}" \
            -d "text=üö® <b>WORKFLOW ERROR</b>%0A%0Aüïí Time: $TIMESTAMP%0A‚ö†Ô∏è Health check workflow failed%0Aüîó Check: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}%0A%0Aüõ† Action required!" \
            -d "parse_mode=HTML" || true